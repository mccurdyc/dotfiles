#!/bin/bash

# prerequisites
autoload -Uz promptinit
promptinit
setopt prompt_subst
autoload -U colors && colors

# https://gist.github.com/joshdick/4415470
# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL="%{$fg[blue]%}±"
GIT_PROMPT_BRANCH_SYMBOL="%{$fg[blue]%}"
GIT_PROMPT_NO_REPO_SYMBOL="%B%{$fg[yellow]%}(no repo)%b"
GIT_PROMPT_PREFIX="%{$fg[white]%}[%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[white]%}]%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"
GIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"
GIT_PROMPT_MERGING="%{$fg[magenta]%}⚡︎%{$reset_color%}"
GIT_PROMPT_UNTRACKED="%{$fg[red]%}●%{$reset_color%}"
GIT_PROMPT_MODIFIED="%{$fg[yellow]%}●%{$reset_color%}"
GIT_PROMPT_STAGED="%{$fg[green]%}●%{$reset_color%}"

parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

# Show different symbols as appropriate for various Git repository states
parse_git_state() {

  # Compose this value via multiple conditional appends.
  local GIT_STATE=""

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi

  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi

  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
  fi

}

# If inside a Git repository, print its branch and state
git_prompt_string() {
  local git_where="$(parse_git_branch)"
  if [[ -n $git_where ]]; then
    echo "$GIT_PROMPT_SYMBOL$(parse_git_state) $GIT_PROMPT_PREFIX %{%B$fg[yellow]%}${git_where#(refs/heads/|tags/)}%b $GIT_PROMPT_SUFFIX"
  else
    echo "$GIT_PROMPT_PREFIX$GIT_PROMPT_NO_REPO_SYMBOL$GIT_PROMPT_SUFFIX"
  fi
}

chef_block_prompt_string() {
  echo $(readlink ~/.chef/knife.rb  | cut -d '/' -f 5 | cut -d '-' -f 2 | sed 's|.rb||')
}

# Common-used variable for new line separator
newline() {
NEWLINE='
'
  echo -n "$NEWLINE"
  printf '╚══ $ '
}

# lefthand
# https://www.liveinternet.ru/users/5110814/post347144493
PROMPT="╔ [ %F{white}"                ## primary coloring
PROMPT+="%M:"                  ## username@hostname for ssh
PROMPT+="%3~ ] "                  ## trailing pwd dirs
# PROMPT+='chef $(chef_block_prompt_string) '
PROMPT+='$(git_prompt_string)'   ## make git branch bold and yellow (%B starts, %b stops)
PROMPT+="%(1j.%jj .)"             ## jobs when present
PROMPT+='%(?.%F{green} \$? %F{white}.%F{red} \$? %F{white})'
PROMPT+='$(newline)'

# multiline
PROMPT2="%F{white}╚══ > "
